buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
    }
}

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id 'org.jetbrains.kotlin.jvm' version "1.4.0"
    id 'org.jetbrains.kotlin.plugin.serialization' version "1.4.0"
}

jar {
    manifest {
        attributes 'Main-Class': 'io.github.starwishsama.comet.CometKt'
    }
}

def gitCommitId = 'git rev-parse --short HEAD'
def versionCode = "0.5.3-DEV-" + gitCommitId.execute().text.trim() + "-" + new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))

group 'io.github.starwishsama.comet'
version versionCode

repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    jcenter()
    mavenCentral()
    google()
    mavenLocal()
}

task updateVersion {
    def versionFileDir = projectDir.getAbsolutePath() + File.separatorChar + 'src' + File.separatorChar + 'main' + File.separatorChar + 'kotlin' + File.separatorChar + 'io' + File.separatorChar + 'github' + File.separatorChar + 'starwishsama' + File.separatorChar + 'comet' + File.separatorChar + 'BotVariables.kt'
    def oldVersionStr = findOldVersionStr(versionFileDir)
    def newVersionStr = "    const val version = \"" + versionCode + "\""
    def updatedContent = new File(versionFileDir).getText('UTF-8').replaceAll(oldVersionStr, newVersionStr)
    new File(versionFileDir).write(updatedContent, 'UTF-8')
}

static def findOldVersionStr(path) {
    def readerString = ""
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.contains("version")) {
                readerString <<= it
                return readerString
            }
            return void
        }
        return readerString
    }
}

jar.dependsOn updateVersion

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0-RC'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    implementation 'net.mamoe:mirai-core:1.2.2'
    implementation 'net.mamoe:mirai-core-qqandroid:1.2.2'

    implementation 'cn.hutool:hutool-http:5.3.10'

    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.apache.commons:commons-io:1.3.2'

    implementation 'com.google.code.gson:gson:2.8.6'
    // kaml @ https://github.com/charleskorn/kaml
    implementation 'com.charleskorn.kaml:kaml:0.19.0'
    // yamlkt @ https://github.com/him188/yamlkt
    //implementation("net.mamoe.yamlkt:yamlkt:0.5.0")
    // kotson @ https://github.com/SalomonBrys/Kotson
    implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'

    // CUrl
    implementation 'com.github.rockswang:java-curl:1.2.2.2'

    // BiliBili-Api @ https://github.com/czp3009/bilibili-api
    api 'com.hiczp:bilibili-api:0.1.3'

    // jsoup HTML parser library @ https://jsoup.org/
    implementation 'org.jsoup:jsoup:1.13.1'

    // Retrofit A type-safe HTTP client for Android and Java @ https://github.com/square/retrofit/
    //implementation 'com.squareup.retrofit2:retrofit:2.9.0'

    // RomeTool for RSS @ https://github.com/rometools/rome
    implementation 'com.rometools:rome:1.15.0'
    implementation 'com.rometools:rome-utils:1.15.0'
    implementation 'com.rometools:rome-fetcher:1.15.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

shadowJar {
    zip64 true
    exclude("META-INF/README")
    exclude("META-INF/NOTICE.txt")
    exclude("META-INF/README.md")
    exclude("META-INF/LICENSE")
    exclude("META-INF/LICENSE.txt")
    exclude("META-INF/CHANGES")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs = ["-Xjvm-default=enable", "-Xopt-in=kotlin.RequiresOptIn", "-XXLanguage:+InlineClasses"]
    }
}