group 'top.starwish'
version '1.4.3-RELEASE'

apply plugin: 'java'

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'http://deadmandungeons.com/artifactory/public' }
    maven { url 'https://oss.sonatype.org/content/groups/public' }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
	compile 'com.rometools:rome:1.12.0'
	compile 'com.rometools:rome-utils:1.12.0'
	compile 'com.sobte.cqp:jcq-coolq:1.2.7'
	compile 'commons-codec:commons-codec:1.9'
	compile 'commons-logging:commons-logging:1.2'
	compile 'org.apache.httpcomponents:httpclient:4.5.2'
	compile 'org.apache.httpcomponents:httpcore:4.4.4'
    compile 'org.apache.commons:commons-io:1.3.2'
	compile 'org.jdom:jdom2:2.0.6'
	compile 'org.slf4j:slf4j-api:1.7.16'
    compile 'org.slf4j:slf4j-nop:1.7.9'
    compile 'com.alibaba:fastjson:1.2.56'
    compile 'com.deadmandungeons:mc-server-status:1.2.0'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    testCompile 'junit:junit:4.12'
}

//preBuild.dependsOn copyJars

task copyJars(type:Copy) {
  	from configurations.runtime
  	into 'dependencies'
}
//替换版本号
task updateVersion {
    def versionFileDir = projectDir.getAbsolutePath() + File.separatorChar + 'src' + File.separatorChar + 'main' + File.separatorChar + 'java' + File.separatorChar + 'top' + File.separatorChar + 'starwish' + File.separatorChar + 'namelessbot' + File.separatorChar + 'VerClass.java';
    println versionFileDir;
    def oldVersionStr = findOldVersionStr(versionFileDir);
    println oldVersionStr;
    def newVersionValue = getNewVersionValue();
    println newVersionValue;
    def newVersionStr = "public static final String VERSION = \"" + newVersionValue + "\";"
    println newVersionStr;
    def updatedContent = new File(versionFileDir).getText('UTF-8').replaceAll(oldVersionStr, newVersionStr); 
    new File(versionFileDir).write(updatedContent, 'UTF-8')
}

def findOldVersionStr(path) {
    def readerString = "";
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.contains("VERSION")) {
                readerString <<= it
                return readerString
            }
        }
        return readerString
    }
}

def getNewVersionValue() {
    return version;
}

jar.dependsOn updateVersion
jar.dependsOn copyJars